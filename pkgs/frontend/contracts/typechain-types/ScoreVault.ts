/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ScoreVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getScore"
      | "scores"
      | "setScore"
      | "verifierContract"
      | "verifyProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdateScore" | "Verify"): EventFragment;

  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "scores", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setScore",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifierContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifierContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace UpdateScoreEvent {
  export type InputTuple = [
    msgSender: AddressLike,
    count: BigNumberish,
    encryptedData: string
  ];
  export type OutputTuple = [
    msgSender: string,
    count: bigint,
    encryptedData: string
  ];
  export interface OutputObject {
    msgSender: string;
    count: bigint;
    encryptedData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyEvent {
  export type InputTuple = [msgSender: AddressLike, result: boolean];
  export type OutputTuple = [msgSender: string, result: boolean];
  export interface OutputObject {
    msgSender: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ScoreVault extends BaseContract {
  connect(runner?: ContractRunner | null): ScoreVault;
  waitForDeployment(): Promise<this>;

  interface: ScoreVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getScore: TypedContractMethod<
    [_address: AddressLike],
    [[bigint, string]],
    "view"
  >;

  scores: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { count: bigint; encryptedData: string }],
    "view"
  >;

  setScore: TypedContractMethod<
    [_count: BigNumberish, _encryptedData: string],
    [void],
    "nonpayable"
  >;

  verifierContract: TypedContractMethod<[], [string], "view">;

  verifyProof: TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[_address: AddressLike], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "scores"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, string] & { count: bigint; encryptedData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setScore"
  ): TypedContractMethod<
    [_count: BigNumberish, _encryptedData: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifierContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish]
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "UpdateScore"
  ): TypedContractEvent<
    UpdateScoreEvent.InputTuple,
    UpdateScoreEvent.OutputTuple,
    UpdateScoreEvent.OutputObject
  >;
  getEvent(
    key: "Verify"
  ): TypedContractEvent<
    VerifyEvent.InputTuple,
    VerifyEvent.OutputTuple,
    VerifyEvent.OutputObject
  >;

  filters: {
    "UpdateScore(address,uint256,string)": TypedContractEvent<
      UpdateScoreEvent.InputTuple,
      UpdateScoreEvent.OutputTuple,
      UpdateScoreEvent.OutputObject
    >;
    UpdateScore: TypedContractEvent<
      UpdateScoreEvent.InputTuple,
      UpdateScoreEvent.OutputTuple,
      UpdateScoreEvent.OutputObject
    >;

    "Verify(address,bool)": TypedContractEvent<
      VerifyEvent.InputTuple,
      VerifyEvent.OutputTuple,
      VerifyEvent.OutputObject
    >;
    Verify: TypedContractEvent<
      VerifyEvent.InputTuple,
      VerifyEvent.OutputTuple,
      VerifyEvent.OutputObject
    >;
  };
}
